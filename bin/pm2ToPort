#!/usr/bin/env node

var yargs = require('yargs')
    .strict()
    .version(function() {
        return require('../package').version;
    })
    .usage('Get port for given subdomain based on current pm2 process list and ports of each process')
    .help('help')
    .options({
        n: {
            alias: 'name',
            describe: 'route/process name'
        },
        p: {
            alias: 'prefix',
            describe: 'filter process by name prefix'
        },
        r: {
            alias: 'range',
            describe: 'port range in which pick ports'
        }
    })
    .demand('n');

var yargv = yargs.argv;

if (!yargv.range) {
    yargv.range = require('../conf/server.json').range;
}

if (!/^\d+,\d+$/.test(yargv.range)) {
    console.error('range must be "<lower-port>,<higher-port>"');
    yargs.showHelp();
    process.exit(1);
}

var range = yargv.range.split(',');
if (range[0] > range[1]) {
    range[2] = range[0];
    range = range.slice(1);
}

var exec = require('child_process').exec;
var execSync = require('child_process').execSync;

function parsePm2ProcessDetails(process) {
    process = process.split('\n');

    var values = process.slice(1).reduce(function(values, value) {
        value = value.split(':');
        if (value.length > 1) {
            values[value[0].trim()] = value[1].trim();
        }
        return values;
    }, {});

    values.name = process[0].trim();
    return values;
}

function pm2ProcessToRoutesList(pm2Output, processPrefix) {
    return pm2Output
        .split('+---')
        .reduce(function(routes, process) {
            var values = parsePm2ProcessDetails(process);

            if (values.status === 'online' && !processPrefix || values.name.indexOf(processPrefix) === 0) {
                try {
                    var netstat = execSync('netstat -plnt | grep ' + values.pid + '/', {
                        stdio: [null, null, 'ignore']
                    });
                    values.port = /^\w+\s+\d+\s+\d+\s+[^\s]+:(\d+)\s/.exec(netstat)[1];
                }
                catch(error) {}

                if (values.port) {
                    var name = processPrefix ? values.name.substr(processPrefix.length) : values.name;
                    routes[name] = +values.port;
                }
            }

            return routes;
        }, {});
}

exec('pm2 list -m', function(error, stdout, stderr) {
    var routes = pm2ProcessToRoutesList(stdout, yargv.prefix);
    var ports = [];

    var route = Object.keys(routes).filter(function(route) {
        ports.push(routes[route]);
        return route === (yargv.prefix || '') + yargv.name;
    })[0];

    if (route) {
        console.log(routes[route]);
        return;
    }

    for (var i = range[0]; i < range[1]; i++) {
        if (!~ports.indexOf(i)) {
            console.log(i);
            break;
        }
    }
});
