#!/usr/bin/env node

var yargs = require('yargs')
    .strict()
    .version(function() {
        return require('../package').version;
    })
    .usage('Get current pm2 process list and tpc port listen by each process')
    .help('help')
    .options({
        p: {
            alias: 'prefix',
            describe: 'filter process by name prefix'
        },
        o: {
            alias: 'output',
            describe: 'file where result should be written'
        }
    })
    .argv;


var exec = require('child_process').exec;
var execSync = require('child_process').execSync;
var fs = require('fs');

function parsePm2ProcessDetails(process) {
    process = process.split('\n');

    var values = process.slice(1).reduce(function(values, value) {
        value = value.split(':');
        if (value.length > 1) {
            values[value[0].trim()] = value[1].trim();
        }
        return values;
    }, {});

    values.name = process[0].trim();
    return values;
}

function pm2ProcessToRoutesList(pm2Output, processPrefix) {
    return pm2Output
        .split('+---')
        .reduce(function(routes, process) {
            var values = parsePm2ProcessDetails(process);

            if (values.status === 'online' && !processPrefix || values.name.indexOf(processPrefix) === 0) {
                try {
                    var netstat = execSync('netstat -plnt | grep ' + values.pid + '/', {
                        stdio: [null, null, 'ignore']
                    });
                    values.port = /^\w+\s+\d+\s+\d+\s+[^\s]+:(\d+)\s/.exec(netstat)[1];
                }
                catch(error) {}

                if (values.port) {
                    var name = processPrefix ? values.name.substr(processPrefix.length) : values.name;
                    routes[name] = +values.port;
                }
            }

            return routes;
        }, {});
}

exec('pm2 list -m', function(error, stdout, stderr) {
    var routes = pm2ProcessToRoutesList(stdout, yargs.prefix);

    if (yargs.output) {
        fs.writeFileSync(yargs.output, JSON.stringify(routes, null, '  '));
        return;
    }
    console.log(JSON.stringify(routes, null, '  '));
});
